.. .............................................................................
..
.. Filename       : 改进.rst
.. Author         : Huang Leilei
.. Created        : 2020-06-26
.. Description    : 主页
..
.. .............................................................................

=====
改进
=====

-------
改进一
-------

*   |   针对第一个缺点：“该算法并未提供选择特定块的有效方式，如果选择不当，可能无法造成失真，或者失真无法被扩散成能够被识别的水印信息”，
    |   我尝试将原算法从“选择某个特定块”修改为“对于所有的块”。

*   对应的伪代码如下：

    ::

        if (mode == 0)
            mode = 1;
        else if (mode == 1)
            mode = 0;
        else if (mode == 17 || mode == 34)
            --mode;
        else
            ++mode;

*   |   显然，修改后的算法不仅可以确保造成失真，而且能够确保失真分布在整个画幅内。
    |   然而，这也意味着水印很可能会急剧地影响编码的质量。
    |   因此，以下对修改后算法的B-D码率进行了测试，具体的结果如下：

    .. table::
        :align: left
        :widths: auto

        ================ ============ ============ ============ ==============
        序列              B-D码率(Y)   B-D码率(Y)   B-D码率(Y)   B-D码率(YUV)
        ================ ============ ============ ============ ==============
        BasketballPass    25.1%        15.8%        16.2%        22.1%
        BQSquare          18.1%        10.8%        10.7%        15.7%
        BlowingBubbles    17.3%        8.3%         8.2%         14.3%
        RaceHorses        17.7%        11.0%        11.4%        15.6%
        BasketballDrill   31.4%        24.3%        25.5%        29.2%
        BQMall            24.9%        15.2%        14.9%        21.7%
        PartyScene        16.8%        9.6%         9.3%         14.4%
        RaceHorsesC       16.1%        8.3%         8.6%         13.5%
        FourPeople        27.7%        14.5%        13.2%        23.1%
        Johnny            32.0%        22.7%        21.9%        28.8%
        KristenAndSara    29.3%        19.6%        17.7%        25.8%
        Kimono            11.2%        5.9%         5.9%         9.4%
        ParkScene         13.2%        4.0%         3.3%         10.0%
        Cactus            19.9%        11.0%        11.7%        17.0%
        BasketballDrive   28.8%        15.4%        16.7%        24.5%
        BQTerrace         20.2%        11.0%        10.3%        17.0%
        Traffic           19.0%        11.4%        10.2%        16.3%
        PeopleOnStreet    22.0%        13.6%        11.7%        18.9%
        ================ ============ ============ ============ ==============

*   |   根据上述结果可知，修改后的B-D码率从原先的0.7%恶化到了18.7%。
    |   这一恶化在实际的工程应用中是难以接受的，因此，我们需要进一步的改进。

    \

-------
改进二
-------

*   |   值得注意的是，上述结果也从另一个侧面反映了该算法的第二个缺点：“该算法选择替换模式的依据并不充分，尤其是对Planar模式和DC模式进行的对调。”
    |   因此，我选择了首先从替换模式的角度去尝试优化B-D码率。
    |   事实上，编码器选择模式的过程就是按照代价函数对各个模式进行排序的过程。
    |   因此，与其选择交换DC模式和Planar模式，对当前角度模式自增一或者对当前模式自减一，不如选择排序后的次优模式作为替换。

*   对应的伪代码如下：

    ::

        mode = modeList[1];

    其中，modeList为排序后的模式。

    \

*   各个序列的具体表现如下所示：

    .. table::
        :align: left
        :widths: auto

        ================ ============ ============ ============ ==============
        序列              B-D码率(Y)   B-D码率(Y)   B-D码率(Y)   B-D码率(YUV)
        ================ ============ ============ ============ ==============
        BasketballPass    15.9%        11.2%        11.2%        14.3%
        BQSquare          13.5%        8.9%         8.5%         11.9%
        BlowingBubbles    11.6%        6.3%         6.0%         9.8%
        RaceHorses        13.3%        8.9%         8.9%         11.8%
        BasketballDrill   21.0%        16.3%        16.9%        19.5%
        BQMall            17.9%        11.5%        11.5%        15.8%
        PartyScene        11.3%        6.9%         6.9%         9.9%
        RaceHorsesC       11.5%        6.3%         6.5%         9.8%
        FourPeople        19.9%        10.9%        10.4%        16.9%
        Johnny            25.0%        17.9%        17.0%        22.5%
        KristenAndSara    22.6%        15.4%        14.1%        20.0%
        Kimono            9.5%         5.0%         5.0%         8.0%
        ParkScene         9.2%         2.5%         2.1%         6.9%
        Cactus            14.3%        8.0%         8.5%         12.3%
        BasketballDrive   17.2%        8.1%         9.2%         14.3%
        BQTerrace         13.9%        8.0%         7.6%         11.9%
        Traffic           13.7%        8.3%         7.2%         11.7%
        PeopleOnStreet    16.9%        10.4%        8.8%         14.4%
        ================ ============ ============ ============ ==============

*   |   根据上述结果，尽管修改替换方式后的平均B-D码率的确优于原替换方式的18.7%，但仍然高达13.4%，无法为实际工程应用所接受，需要进一步改进。

    \

-------
改进三
-------

*   |   为了进一步降低B-D码率，我引入了一个异或链（此处直接使用伪随机数发生器实现），
    |   当该异或链的输出（单比特）为1时，引入失真，否则保持原始值。
    |   事实上，通过设置该异或链的初始值（此处直接使用srand实现），我们还可以解决第三个缺点，即：
    |   “该算法的输入参数只有位置，难以满足为多个用户加入多个水印的需求。”

    ::

        static bool flgIni = 1;
        if (flgIni) {
            flgIni = 0;
            srand(DATA_SEED);
        }

        if (rand() % 2) {
            mode = modeList[1];
        }

    以下仍然对B-D码率结果进行测试，具体的结果如下：

    .. table::
        :align: left
        :widths: auto

        ================ ============ ============ ============ ==============
        序列              B-D码率(Y)   B-D码率(Y)   B-D码率(Y)   B-D码率(YUV)
        ================ ============ ============ ============ ==============
        BasketballPass    6.9%         4.6%         4.6%         6.1%
        BQSquare          6.4%         4.5%         4.0%         5.7%
        BlowingBubbles    5.4%         3.1%         3.0%         4.6%
        RaceHorses        5.9%         4.0%         4.0%         5.2%
        BasketballDrill   8.8%         6.6%         7.1%         8.1%
        BQMall            8.0%         5.1%         5.1%         7.0%
        PartyScene        5.3%         3.3%         3.3%         4.6%
        RaceHorsesC       5.3%         2.7%         2.7%         4.4%
        FourPeople        8.6%         4.6%         4.2%         7.2%
        Johnny            10.1%        6.7%         6.5%         8.9%
        KristenAndSara    9.6%         6.4%         5.9%         8.5%
        Kimono            4.4%         2.4%         2.3%         3.7%
        ParkScene         4.7%         1.3%         0.9%         3.5%
        Cactus            6.5%         3.5%         3.7%         5.5%
        BasketballDrive   7.4%         3.1%         3.2%         5.9%
        BQTerrace         5.7%         3.1%         2.8%         4.8%
        Traffic           6.2%         3.6%         3.0%         5.2%
        PeopleOnStreet    7.5%         4.6%         3.9%         6.4%
        ================ ============ ============ ============ ==============

*   |   根据上述结果，引入异或链后的B-D码率已经低至5.9%，勉强达到可以使用的程度。
    |   除此之外，由于异或链的引入，发行者可以针对不同的用户选用不同的初始值，从而达到甄别泄露源的目的。

-------
改进四
-------

*   |   为了解决第四个问题：“该算法并未提供调节水印“强度”的有效方式，基于该算法，似乎只能通过选择位置改变水印的覆盖范围，但并不能改变水印的具体“强度”。”，
    |   我不再使用异或链的输出作为替换模式的使能，而是根据内部状态（，如，是否小于某个特定值，）来决定是否替换模式。

    一种可行的伪代码如下：

    ::

        static bool flgIni = 1;
        if (flgIni) {
            flgIni = 0;
            srand(DATA_SEED);
        }

        if (rand() % 100 < DATA_RATE) {
            mode = modeList[1];
        }

    |   上述代码约束了大约DATA_RATE%的块会被替换最佳模式。换言之，调节DATA_RATE，就可以对水印“强度”和编码效果进行权衡。
    |   经测试，当DATA_RATE等于6，即6%时，能够取得略优于原算法持平的B-D码率表现，具体结果如下所示：

    .. table::
        :align: left
        :widths: auto

        ================ ============ ============ ============ ==============
        序列              B-D码率(Y)   B-D码率(Y)   B-D码率(Y)   B-D码率(YUV)
        ================ ============ ============ ============ ==============
        BasketballPass    0.7%         0.5%         1.0%         0.7%
        BQSquare          0.7%         0.7%         0.2%         0.6%
        BlowingBubbles    0.5%         0.4%         0.3%         0.5%
        RaceHorses        0.7%         0.4%         0.3%         0.6%
        BasketballDrill   0.9%         0.7%         0.9%         0.9%
        BQMall            0.9%         0.7%         0.8%         0.8%
        PartyScene        0.6%         0.4%         0.3%         0.5%
        RaceHorsesC       0.6%         0.3%         0.3%         0.5%
        FourPeople        0.9%         0.5%         0.6%         0.8%
        Johnny            1.1%         0.3%         0.9%         0.9%
        KristenAndSara    1.0%         0.9%         0.6%         0.9%
        Kimono            0.5%         0.2%         0.2%         0.4%
        ParkScene         0.5%         0.2%         0.2%         0.4%
        Cactus            0.7%         0.3%         0.6%         0.6%
        BasketballDrive   0.8%         0.5%         0.5%         0.7%
        BQTerrace         0.6%         0.4%         0.2%         0.5%
        Traffic           0.7%         0.4%         0.3%         0.6%
        PeopleOnStreet    0.8%         0.5%         0.4%         0.7%
        ================ ============ ============ ============ ==============

-----
测试
-----

*   |   原算法的作者将某个块的模式变化在后续块所引入（隐式的）失真视作为水印信息；
    |   而我则是将对于各个块的扰动情况（即扰动和不扰动）视作为水印信息。
    |   具体而言，相比于原算法，改进后的算法选择了一种更为合理的（，或者说，失真更小的）替换方式，并根据异或链的状态有约束地施加到视频的整个画幅上，
    |   因此，直接带来的好处有：

    #.  水印的分布更平均，不用担心由于对替换块的选择不当，而无法造成失真或者失真无法被扩散成能够得到识别水印信息。
    #.  替换模式的依据更合理，因此水印的强度更平均。
    #.  可以通过指定异或链的初始状态为多个用户加入多个不同的水印。
    #.  可以根据需求调节被替换块的比率，从而调节水印的“强度”。

    \

*   以下展示设置不同初始状态后，与原图的差异情况:

    .. image:: 测试.改.种子1.png

    \

    .. image:: 测试.改.种子2.png

    \

    .. image:: 测试.改.种子3.png

    显然，改进后算法的差异更平均，而原算法的差异直接与替换块的位置紧耦合，如下图所示：

    .. image:: 测试.原.种子1.png

    \

*   以下展示经过重编码攻击后的提取情况：

    重编码的方法是：

    #.  对所有加入水印后的视频进行解码得到YUV数据
    #.  对上述所有的YUV数据（以同样的QP）进行编码

    提取的方法是：

    #.  对所有重编码的视频进行解码得到YUV数据
    #.  对所有加入水印后的视频进行解码得到YUV数据
    #.  计算两两之间的PSNR

    \

    以下采用改进后算法为同一序列添加了10个不同的水印，并按照上述重编码和提取的方法进行处理，并得到下图：

    .. image:: 测试.psnr.改.png

    显然，改进后算法的稳定度更高，而原算法则不太稳定，如下图所示：

    .. image:: 测试.psnr.原.png

---------
后续工作
---------

*   由于时间原因，本次调研的测试较为简单：

    #.  只测试了帧内帧的情况
    #.  只测试了以相同QP重编码的攻击

    应在后续的工作中补全更多的测试和分析。

*   事实上，基于我的这一想法：“对于各个块的扰动情况（即扰动和不扰动）视作为水印信息。”，我们可以进一步地对算法进行扩展，例如：

    #.  除了扰动帧内预测模式之外，也可以扰动帧间预测矢量，或者编码QP，这同样能够起到添加水印的目的。
    #.  除了调节替换块的比例之外，也可以调节扰动的强度，这同样能够起到改变水印强度的目的。
